---
# Copyright (C) 2022 Leandro Lisboa Penz <lpenz@lpenz.org>
# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
name: rust
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      enable_cargo-semver-checks:
        description: |
          Enables cargo-semver-checks - default is true.
        required: false
        type: boolean
        default: true
      coveralls:
        description: |
          Makes cargo-test upload test coverage data to coveralls.io
          when true.
        required: false
        type: boolean
        default: false
      codecov:
        description: |
          Makes *cargo-test* upload test coverage data to codecov.io
          when true.
        required: false
        type: boolean
        default: false
      deb:
        description: Enables deb when true.
        required: false
        type: boolean
        default: false
      rpm:
        description: Enables rpm when true.
        required: false
        type: boolean
        default: false
      dependencies_debian:
        description: |
          Dependencies as Debian packages to install; used in the
          appropriate actions if defined
        type: string
      publish_cratesio:
        description: Enables the publish-cratesio job.
        required: false
        type: boolean
        default: true
      publish_github_release:
        description: Enables the publish-github-release job.
        required: false
        type: boolean
        default: true
      publish_github_release_files:
        description: Files to publish in the github release.
        required: false
        type: string
        default: ''
      publish_packagecloud_repository_deb:
        description: packagecloud repository to publish the .deb.
        required: false
        type: string
        default: ''
      publish_packagecloud_repository_rpm:
        description: packagecloud repository to publish the .rpm.
        required: false
        type: string
        default: ''
    secrets:
      CARGO_REGISTRY_TOKEN:
        required: false
      PACKAGECLOUD_TOKEN:
        required: false
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version_tagged: ${{ needs.version.outputs.version_tagged }}
      version_commit: ${{ needs.version.outputs.version_commit }}
      deb_basename: ${{ steps.version.outputs.deb_basename }}
      rpm_basename: ${{ steps.version.outputs.rpm_basename }}
    steps:
      - uses: actions/checkout@v4.2.2
      - id: version
        uses: docker://lpenz/ghaction-version-gen:0.16.1
  cargo-build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: >
          sudo apt-get install -y --no-install-recommends
          ${{ inputs.dependencies_debian }}
        if: inputs.dependencies_debian
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo build --release
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: cargo-build-release
          if-no-files-found: error
          path: target/release
  cargo-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo check
  cargo-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo doc --all-features
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: cargo-doc
          if-no-files-found: error
          path: target/doc
  cargo-test:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: >
          sudo apt-get install -y --no-install-recommends
          ${{ inputs.dependencies_debian }}
        if: inputs.dependencies_debian
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools
      - uses: taiki-e/install-action@v2.56.9
        with:
          tool: cargo-llvm-cov
      - run: cargo llvm-cov --all-features --lcov --output-path lcov.info
        env:
          CARGO_HUSKY_DONT_INSTALL_HOOKS: true
      - name: Upload coverage data to coveralls
        uses: coverallsapp/github-action@v2.3.6
        if: inputs.coveralls
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: lcov.info
      - name: Upload coverage data to codecov
        uses: codecov/codecov-action@v5.4.3
        if: inputs.codecov
        with:
          files: lcov.info
          fail_ci_if_error: true
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - run: cargo clippy --all-features
  cargo-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-audit
      - run: cargo audit
  deb:
    needs: [version]
    runs-on: ubuntu-latest
    outputs:
      deb: ${{ steps.pkg.outputs.deb }}
    steps:
      - name: Install dependencies
        run: >
          sudo apt-get install -y --no-install-recommends
          ${{ inputs.dependencies_debian }}
          musl-dev
        if: inputs.deb
      - uses: actions/checkout@v4.2.2
        if: inputs.deb
      - name: Set .deb information
        id: pkg
        run: >
          set -e -x;
          deb_arch=$(dpkg --print-architecture);
          deb=${{ needs.version.outputs.deb_basename }}_$deb_arch.deb;
          echo "deb=$deb" >> "$GITHUB_ENV";
          echo "deb=$deb" >> "$GITHUB_OUTPUT";
      - uses: dtolnay/rust-toolchain@stable
        if: inputs.deb
        with:
          target: x86_64-unknown-linux-musl
      - name: Install cargo-deb
        if: inputs.deb
        run: cargo install cargo-deb
      - name: Run cargo-deb for tests only
        if: inputs.deb && needs.version.outputs.version_commit == ''
        run: >
          cargo deb --target x86_64-unknown-linux-musl
      - name: Run cargo-deb for release
        if: inputs.deb && needs.version.outputs.version_commit != ''
        run: >
          cargo deb --target x86_64-unknown-linux-musl
          --deb-version '${{ needs.version.outputs.version_commit }}'
      - name: Move deb to top dir
        if: inputs.deb
        run: >
          mv ./target/x86_64-unknown-linux-musl/debian/*.deb ./$deb
      - name: Show deb information
        if: inputs.deb
        run: >
          set -e -x;
          find . -name '*.deb';
          dpkg -I $deb;
          dpkg -c $deb;
      - uses: actions/upload-artifact@v4.6.2
        if: inputs.deb
        with:
          name: ${{ steps.pkg.outputs.deb }}
          path: ${{ steps.pkg.outputs.deb }}
          if-no-files-found: error
  rpm:
    needs: [version]
    runs-on: ubuntu-latest
    outputs:
      rpm: ${{ steps.pkg.outputs.rpm }}
    steps:
      - name: Install dependencies
        run: >
          sudo apt-get install -y --no-install-recommends
          ${{ inputs.dependencies_debian }}
          musl-dev
        if: inputs.rpm
      - uses: actions/checkout@v4.2.2
        if: inputs.rpm
      - name: Set .rpm info
        id: pkg
        run: >
          set -e -x;
          rpm_arch=$(rpm --eval '%_arch');
          rpm=${{ needs.version.outputs.rpm_basename }}.$rpm_arch.rpm;
          echo "rpm=$rpm" >> "$GITHUB_ENV";
          echo "rpm=$rpm" >> "$GITHUB_OUTPUT";
      - uses: dtolnay/rust-toolchain@stable
        if: inputs.rpm
        with:
          target: x86_64-unknown-linux-musl
      - name: Build release for x86_64-unknown-linux-musl to avoid dependencies
        if: inputs.rpm
        run: cargo build --release --target x86_64-unknown-linux-musl
      - name: Install cargo-generate-rpm
        if: inputs.rpm
        run: cargo install cargo-generate-rpm
      - name: Generate the RPM
        if: inputs.rpm
        run: >
          cargo generate-rpm --target x86_64-unknown-linux-musl -o $rpm
      - name: Show rpm info
        if: inputs.rpm
        run: >
          set -e -x;
          find . -name '*.rpm';
          rpm -qp $rpm --info;
          rpm -qp $rpm --requires;
          rpm -qp $rpm --provides;
          rpm -qp $rpm --list
      - name: Test the installation in almalinux
        if: inputs.rpm
        run: >
          set -e -x;
          docker run --rm -v $PWD:$PWD -w $PWD almalinux rpm -iv $rpm
        env:
          CARGO_TARGET_DIR: target/x86_64-unknown-linux-musl
      - uses: actions/upload-artifact@v4.6.2
        if: inputs.rpm
        with:
          name: ${{ steps.pkg.outputs.rpm }}
          path: ${{ steps.pkg.outputs.rpm }}
          if-no-files-found: error
  rust-misc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
      - name: Check Cargo.lock version against Cargo.toml
        run: cargo update -w --locked
        if: ${{ hashFiles('Cargo.lock') != '' }}
  cargo-semver-checks:
    needs: [version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: cargo-semver-checks
        uses: obi1kenobi/cargo-semver-checks-action@v2.8
        if: >
          inputs.enable_cargo-semver-checks &&
          needs.version.outputs.version_tagged != ''
  publish-cratesio:
    needs: [version, cargo-build-release, cargo-check, cargo-test,
            rustfmt, clippy, cargo-audit, deb, rpm, rust-misc,
            cargo-semver-checks]
    if: inputs.publish_cratesio
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Publish crate on crates.io
        uses: katyo/publish-crates@v2
        if: needs.version.outputs.version_tagged != ''
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  publish-packagecloud-deb:
    needs: [version, cargo-build-release, cargo-check, cargo-test,
            rustfmt, clippy, cargo-audit, deb, rust-misc,
            cargo-semver-checks]
    if: inputs.deb && inputs.publish_packagecloud_repository_deb
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.publish_packagecloud_repository_deb) }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Download the package generated by deb
        uses: actions/download-artifact@v4.3.0
        if: inputs.deb
        with:
          name: ${{ needs.deb.outputs.deb }}
      - name: Publish deb on packagecloud
        uses: docker://lpenz/ghaction-packagecloud:0.5
        if: needs.version.outputs.version_tagged != ''
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        with:
          repository: ${{ matrix.repository }}
  publish-packagecloud-rpm:
    needs: [version, cargo-build-release, cargo-check, cargo-test,
            rustfmt, clippy, cargo-audit, rpm, rust-misc,
            cargo-semver-checks]
    if: inputs.rpm && inputs.publish_packagecloud_repository_rpm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.publish_packagecloud_repository_rpm) }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Download the package generated by rpm
        uses: actions/download-artifact@v4.3.0
        if: inputs.rpm
        with:
          name: ${{ needs.rpm.outputs.rpm }}
      - name: Publish rpm on packagecloud
        uses: docker://lpenz/ghaction-packagecloud:0.5
        if: needs.version.outputs.version_tagged != ''
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        with:
          repository: ${{ matrix.repository }}
  publish-github-release:
    needs: [version, cargo-build-release, cargo-check, cargo-test,
            rustfmt, clippy, cargo-audit, deb, rpm, rust-misc,
            cargo-semver-checks]
    if: inputs.publish_github_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Download cargo-build-release
        uses: actions/download-artifact@v4.3.0
        with:
          name: cargo-build-release
          path: target/release
      - name: Download deb
        uses: actions/download-artifact@v4.3.0
        if: inputs.deb
        with:
          name: ${{ needs.deb.outputs.deb }}
      - name: Download rpm
        uses: actions/download-artifact@v4.3.0
        if: inputs.rpm
        with:
          name: ${{ needs.rpm.outputs.rpm }}
      - name: List all files
        run: find . -type f
      - name: Publish github release
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        if: needs.version.outputs.version_tagged != ''
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          files: |
            ${{ needs.deb.outputs.deb }}
            ${{ needs.rpm.outputs.rpm }}
            ${{ inputs.publish_github_release_files }}
